# finding in lab11
# first test in Mac
1. Why is the order of print statements in the output inconsistent across multiple runs?
    parent
    child
    because child process and parent process excute at the mean time,
    but child process take some time to create

2. Introduce a 1 second delay by calling the sleep() function before the print statement in parent. Recompile and run. What is the the difference in ordering of statements now and the before?
    child
    parent
    because parent process delay 1 sec, so child process finish print first

3. Add a line to the parent code that prints the process id (pid) of the child. Also, add a line to the child that calls getpid() and then prints the process id that is returned. Compile and run your modified program. What are the two values?
    In child
    pid of child: 20865
    pid of parent: 20864
    x: 2
    In parent
    pid of parent: 20864
    pid of parent's child: 20865
    x: 0

4. Now, print the parent’s process id in both child and parent. You can obtain it by calling function getppid(). What are the two values?
    In child
    pid : 20930
    pid of parent: 20929
    x: 2
    In parent
    pid : 20929
    pid of parent: 20220
    pid of child: 20930
    x: 0

5. Add a line to print the value of x in the child after it has been incremented. Add a line to print the value of x in the parent after it has been decremented. Recompile the program and rerun it. Why isn’t the last value printed 1?
    In parent
    pid of parent: 72710
    pid of parent's child: 72711
    x: 0
    In child
    pid of child: 72711
    pid of parent: 72710
    x: 2
    because fork function will copy parent varible to child process
    that is to say, this is two different x in different memory

# part2
1. What is the total number of times each of the lines is printed? Why?
    line1
    line2
    line1
    Line4
    line2
    line2
    line3
    line2
    Line4
    line3
    line3
    Line4
    Line4
    line3

    line1, two times, because two returns of fork functino
    line2, four times, because four processes have copy of program
    line3, four times, because four processes have copy of program
    line4, four times, because four processes have copy of program
    what a bad code

2. Modify the program to print the pids and parent pids. (e.g., printf("%d: %d: Line 1\n", getpid(), getppid());)). Capture the output in lab11.txt. Why is the parent pid 1 for some processes?
    line1
    pid: 73006 ppid: 71019
    line2
    pid: 73006 ppid: 71019
    line1
    pid: 73007 ppid: 73006
    Line4
    pid: 73006 ppid: 71019
    line2
    pid: 73008 ppid: 73006
    line2
    pid: 73007 ppid: 1
    line3
    pid: 73009 ppid: 1
    line2
    Line4
    pid: 73010 ppid: 73007
    pid: 73007 ppid: 1
    Line4
    pid: 73008 ppid: 1
    line3
    pid: 73011 ppid: 1
    line3
    pid: 73012 ppid: 1
    Line4
    line3
    pid: 73010 ppid: 1
    pid: 73013 ppid: 73010

# part3
